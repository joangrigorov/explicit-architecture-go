// Code generated by ent, DO NOT EDIT.

package generated

import (
	"app/internal/infrastructure/component/attendance/persistence/ent/generated/attendance"
	"app/internal/infrastructure/component/attendance/persistence/ent/generated/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AttendanceUpdate is the builder for updating Attendance entities.
type AttendanceUpdate struct {
	config
	hooks    []Hook
	mutation *AttendanceMutation
}

// Where appends a list predicates to the AttendanceUpdate builder.
func (_u *AttendanceUpdate) Where(ps ...predicate.Attendance) *AttendanceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAttendeeID sets the "attendee_id" field.
func (_u *AttendanceUpdate) SetAttendeeID(v uuid.UUID) *AttendanceUpdate {
	_u.mutation.SetAttendeeID(v)
	return _u
}

// SetNillableAttendeeID sets the "attendee_id" field if the given value is not nil.
func (_u *AttendanceUpdate) SetNillableAttendeeID(v *uuid.UUID) *AttendanceUpdate {
	if v != nil {
		_u.SetAttendeeID(*v)
	}
	return _u
}

// SetActivityID sets the "activity_id" field.
func (_u *AttendanceUpdate) SetActivityID(v uuid.UUID) *AttendanceUpdate {
	_u.mutation.SetActivityID(v)
	return _u
}

// SetNillableActivityID sets the "activity_id" field if the given value is not nil.
func (_u *AttendanceUpdate) SetNillableActivityID(v *uuid.UUID) *AttendanceUpdate {
	if v != nil {
		_u.SetActivityID(*v)
	}
	return _u
}

// SetActivitySlug sets the "activity_slug" field.
func (_u *AttendanceUpdate) SetActivitySlug(v string) *AttendanceUpdate {
	_u.mutation.SetActivitySlug(v)
	return _u
}

// SetNillableActivitySlug sets the "activity_slug" field if the given value is not nil.
func (_u *AttendanceUpdate) SetNillableActivitySlug(v *string) *AttendanceUpdate {
	if v != nil {
		_u.SetActivitySlug(*v)
	}
	return _u
}

// SetActivityTitle sets the "activity_title" field.
func (_u *AttendanceUpdate) SetActivityTitle(v string) *AttendanceUpdate {
	_u.mutation.SetActivityTitle(v)
	return _u
}

// SetNillableActivityTitle sets the "activity_title" field if the given value is not nil.
func (_u *AttendanceUpdate) SetNillableActivityTitle(v *string) *AttendanceUpdate {
	if v != nil {
		_u.SetActivityTitle(*v)
	}
	return _u
}

// SetActivityPosterImageURL sets the "activity_poster_image_url" field.
func (_u *AttendanceUpdate) SetActivityPosterImageURL(v string) *AttendanceUpdate {
	_u.mutation.SetActivityPosterImageURL(v)
	return _u
}

// SetNillableActivityPosterImageURL sets the "activity_poster_image_url" field if the given value is not nil.
func (_u *AttendanceUpdate) SetNillableActivityPosterImageURL(v *string) *AttendanceUpdate {
	if v != nil {
		_u.SetActivityPosterImageURL(*v)
	}
	return _u
}

// SetActivityShortDescription sets the "activity_short_description" field.
func (_u *AttendanceUpdate) SetActivityShortDescription(v string) *AttendanceUpdate {
	_u.mutation.SetActivityShortDescription(v)
	return _u
}

// SetNillableActivityShortDescription sets the "activity_short_description" field if the given value is not nil.
func (_u *AttendanceUpdate) SetNillableActivityShortDescription(v *string) *AttendanceUpdate {
	if v != nil {
		_u.SetActivityShortDescription(*v)
	}
	return _u
}

// SetActivityHappensAt sets the "activity_happens_at" field.
func (_u *AttendanceUpdate) SetActivityHappensAt(v time.Time) *AttendanceUpdate {
	_u.mutation.SetActivityHappensAt(v)
	return _u
}

// SetNillableActivityHappensAt sets the "activity_happens_at" field if the given value is not nil.
func (_u *AttendanceUpdate) SetNillableActivityHappensAt(v *time.Time) *AttendanceUpdate {
	if v != nil {
		_u.SetActivityHappensAt(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *AttendanceUpdate) SetCreatedAt(v time.Time) *AttendanceUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *AttendanceUpdate) SetNillableCreatedAt(v *time.Time) *AttendanceUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AttendanceUpdate) SetUpdatedAt(v time.Time) *AttendanceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *AttendanceUpdate) SetNillableUpdatedAt(v *time.Time) *AttendanceUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *AttendanceUpdate) SetDeletedAt(v time.Time) *AttendanceUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *AttendanceUpdate) SetNillableDeletedAt(v *time.Time) *AttendanceUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *AttendanceUpdate) ClearDeletedAt() *AttendanceUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// Mutation returns the AttendanceMutation object of the builder.
func (_u *AttendanceUpdate) Mutation() *AttendanceMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AttendanceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AttendanceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AttendanceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AttendanceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *AttendanceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(attendance.Table, attendance.Columns, sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AttendeeID(); ok {
		_spec.SetField(attendance.FieldAttendeeID, field.TypeUUID, value)
	}
	if value, ok := _u.mutation.ActivityID(); ok {
		_spec.SetField(attendance.FieldActivityID, field.TypeUUID, value)
	}
	if value, ok := _u.mutation.ActivitySlug(); ok {
		_spec.SetField(attendance.FieldActivitySlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.ActivityTitle(); ok {
		_spec.SetField(attendance.FieldActivityTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.ActivityPosterImageURL(); ok {
		_spec.SetField(attendance.FieldActivityPosterImageURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.ActivityShortDescription(); ok {
		_spec.SetField(attendance.FieldActivityShortDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.ActivityHappensAt(); ok {
		_spec.SetField(attendance.FieldActivityHappensAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(attendance.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(attendance.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(attendance.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(attendance.FieldDeletedAt, field.TypeTime)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attendance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AttendanceUpdateOne is the builder for updating a single Attendance entity.
type AttendanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttendanceMutation
}

// SetAttendeeID sets the "attendee_id" field.
func (_u *AttendanceUpdateOne) SetAttendeeID(v uuid.UUID) *AttendanceUpdateOne {
	_u.mutation.SetAttendeeID(v)
	return _u
}

// SetNillableAttendeeID sets the "attendee_id" field if the given value is not nil.
func (_u *AttendanceUpdateOne) SetNillableAttendeeID(v *uuid.UUID) *AttendanceUpdateOne {
	if v != nil {
		_u.SetAttendeeID(*v)
	}
	return _u
}

// SetActivityID sets the "activity_id" field.
func (_u *AttendanceUpdateOne) SetActivityID(v uuid.UUID) *AttendanceUpdateOne {
	_u.mutation.SetActivityID(v)
	return _u
}

// SetNillableActivityID sets the "activity_id" field if the given value is not nil.
func (_u *AttendanceUpdateOne) SetNillableActivityID(v *uuid.UUID) *AttendanceUpdateOne {
	if v != nil {
		_u.SetActivityID(*v)
	}
	return _u
}

// SetActivitySlug sets the "activity_slug" field.
func (_u *AttendanceUpdateOne) SetActivitySlug(v string) *AttendanceUpdateOne {
	_u.mutation.SetActivitySlug(v)
	return _u
}

// SetNillableActivitySlug sets the "activity_slug" field if the given value is not nil.
func (_u *AttendanceUpdateOne) SetNillableActivitySlug(v *string) *AttendanceUpdateOne {
	if v != nil {
		_u.SetActivitySlug(*v)
	}
	return _u
}

// SetActivityTitle sets the "activity_title" field.
func (_u *AttendanceUpdateOne) SetActivityTitle(v string) *AttendanceUpdateOne {
	_u.mutation.SetActivityTitle(v)
	return _u
}

// SetNillableActivityTitle sets the "activity_title" field if the given value is not nil.
func (_u *AttendanceUpdateOne) SetNillableActivityTitle(v *string) *AttendanceUpdateOne {
	if v != nil {
		_u.SetActivityTitle(*v)
	}
	return _u
}

// SetActivityPosterImageURL sets the "activity_poster_image_url" field.
func (_u *AttendanceUpdateOne) SetActivityPosterImageURL(v string) *AttendanceUpdateOne {
	_u.mutation.SetActivityPosterImageURL(v)
	return _u
}

// SetNillableActivityPosterImageURL sets the "activity_poster_image_url" field if the given value is not nil.
func (_u *AttendanceUpdateOne) SetNillableActivityPosterImageURL(v *string) *AttendanceUpdateOne {
	if v != nil {
		_u.SetActivityPosterImageURL(*v)
	}
	return _u
}

// SetActivityShortDescription sets the "activity_short_description" field.
func (_u *AttendanceUpdateOne) SetActivityShortDescription(v string) *AttendanceUpdateOne {
	_u.mutation.SetActivityShortDescription(v)
	return _u
}

// SetNillableActivityShortDescription sets the "activity_short_description" field if the given value is not nil.
func (_u *AttendanceUpdateOne) SetNillableActivityShortDescription(v *string) *AttendanceUpdateOne {
	if v != nil {
		_u.SetActivityShortDescription(*v)
	}
	return _u
}

// SetActivityHappensAt sets the "activity_happens_at" field.
func (_u *AttendanceUpdateOne) SetActivityHappensAt(v time.Time) *AttendanceUpdateOne {
	_u.mutation.SetActivityHappensAt(v)
	return _u
}

// SetNillableActivityHappensAt sets the "activity_happens_at" field if the given value is not nil.
func (_u *AttendanceUpdateOne) SetNillableActivityHappensAt(v *time.Time) *AttendanceUpdateOne {
	if v != nil {
		_u.SetActivityHappensAt(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *AttendanceUpdateOne) SetCreatedAt(v time.Time) *AttendanceUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *AttendanceUpdateOne) SetNillableCreatedAt(v *time.Time) *AttendanceUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AttendanceUpdateOne) SetUpdatedAt(v time.Time) *AttendanceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *AttendanceUpdateOne) SetNillableUpdatedAt(v *time.Time) *AttendanceUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *AttendanceUpdateOne) SetDeletedAt(v time.Time) *AttendanceUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *AttendanceUpdateOne) SetNillableDeletedAt(v *time.Time) *AttendanceUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *AttendanceUpdateOne) ClearDeletedAt() *AttendanceUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// Mutation returns the AttendanceMutation object of the builder.
func (_u *AttendanceUpdateOne) Mutation() *AttendanceMutation {
	return _u.mutation
}

// Where appends a list predicates to the AttendanceUpdate builder.
func (_u *AttendanceUpdateOne) Where(ps ...predicate.Attendance) *AttendanceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AttendanceUpdateOne) Select(field string, fields ...string) *AttendanceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Attendance entity.
func (_u *AttendanceUpdateOne) Save(ctx context.Context) (*Attendance, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AttendanceUpdateOne) SaveX(ctx context.Context) *Attendance {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AttendanceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AttendanceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *AttendanceUpdateOne) sqlSave(ctx context.Context) (_node *Attendance, err error) {
	_spec := sqlgraph.NewUpdateSpec(attendance.Table, attendance.Columns, sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Attendance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attendance.FieldID)
		for _, f := range fields {
			if !attendance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != attendance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AttendeeID(); ok {
		_spec.SetField(attendance.FieldAttendeeID, field.TypeUUID, value)
	}
	if value, ok := _u.mutation.ActivityID(); ok {
		_spec.SetField(attendance.FieldActivityID, field.TypeUUID, value)
	}
	if value, ok := _u.mutation.ActivitySlug(); ok {
		_spec.SetField(attendance.FieldActivitySlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.ActivityTitle(); ok {
		_spec.SetField(attendance.FieldActivityTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.ActivityPosterImageURL(); ok {
		_spec.SetField(attendance.FieldActivityPosterImageURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.ActivityShortDescription(); ok {
		_spec.SetField(attendance.FieldActivityShortDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.ActivityHappensAt(); ok {
		_spec.SetField(attendance.FieldActivityHappensAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(attendance.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(attendance.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(attendance.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(attendance.FieldDeletedAt, field.TypeTime)
	}
	_node = &Attendance{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attendance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
