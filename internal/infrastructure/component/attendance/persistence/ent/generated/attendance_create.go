// Code generated by ent, DO NOT EDIT.

package generated

import (
	"app/internal/infrastructure/component/attendance/persistence/ent/generated/attendance"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AttendanceCreate is the builder for creating a Attendance entity.
type AttendanceCreate struct {
	config
	mutation *AttendanceMutation
	hooks    []Hook
}

// SetAttendeeID sets the "attendee_id" field.
func (_c *AttendanceCreate) SetAttendeeID(v uuid.UUID) *AttendanceCreate {
	_c.mutation.SetAttendeeID(v)
	return _c
}

// SetActivityID sets the "activity_id" field.
func (_c *AttendanceCreate) SetActivityID(v uuid.UUID) *AttendanceCreate {
	_c.mutation.SetActivityID(v)
	return _c
}

// SetActivitySlug sets the "activity_slug" field.
func (_c *AttendanceCreate) SetActivitySlug(v string) *AttendanceCreate {
	_c.mutation.SetActivitySlug(v)
	return _c
}

// SetActivityTitle sets the "activity_title" field.
func (_c *AttendanceCreate) SetActivityTitle(v string) *AttendanceCreate {
	_c.mutation.SetActivityTitle(v)
	return _c
}

// SetActivityPosterImageURL sets the "activity_poster_image_url" field.
func (_c *AttendanceCreate) SetActivityPosterImageURL(v string) *AttendanceCreate {
	_c.mutation.SetActivityPosterImageURL(v)
	return _c
}

// SetActivityShortDescription sets the "activity_short_description" field.
func (_c *AttendanceCreate) SetActivityShortDescription(v string) *AttendanceCreate {
	_c.mutation.SetActivityShortDescription(v)
	return _c
}

// SetActivityHappensAt sets the "activity_happens_at" field.
func (_c *AttendanceCreate) SetActivityHappensAt(v time.Time) *AttendanceCreate {
	_c.mutation.SetActivityHappensAt(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *AttendanceCreate) SetCreatedAt(v time.Time) *AttendanceCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *AttendanceCreate) SetUpdatedAt(v time.Time) *AttendanceCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *AttendanceCreate) SetDeletedAt(v time.Time) *AttendanceCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *AttendanceCreate) SetNillableDeletedAt(v *time.Time) *AttendanceCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *AttendanceCreate) SetID(v uuid.UUID) *AttendanceCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the AttendanceMutation object of the builder.
func (_c *AttendanceCreate) Mutation() *AttendanceMutation {
	return _c.mutation
}

// Save creates the Attendance in the database.
func (_c *AttendanceCreate) Save(ctx context.Context) (*Attendance, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AttendanceCreate) SaveX(ctx context.Context) *Attendance {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AttendanceCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AttendanceCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AttendanceCreate) check() error {
	if _, ok := _c.mutation.AttendeeID(); !ok {
		return &ValidationError{Name: "attendee_id", err: errors.New(`generated: missing required field "Attendance.attendee_id"`)}
	}
	if _, ok := _c.mutation.ActivityID(); !ok {
		return &ValidationError{Name: "activity_id", err: errors.New(`generated: missing required field "Attendance.activity_id"`)}
	}
	if _, ok := _c.mutation.ActivitySlug(); !ok {
		return &ValidationError{Name: "activity_slug", err: errors.New(`generated: missing required field "Attendance.activity_slug"`)}
	}
	if _, ok := _c.mutation.ActivityTitle(); !ok {
		return &ValidationError{Name: "activity_title", err: errors.New(`generated: missing required field "Attendance.activity_title"`)}
	}
	if _, ok := _c.mutation.ActivityPosterImageURL(); !ok {
		return &ValidationError{Name: "activity_poster_image_url", err: errors.New(`generated: missing required field "Attendance.activity_poster_image_url"`)}
	}
	if _, ok := _c.mutation.ActivityShortDescription(); !ok {
		return &ValidationError{Name: "activity_short_description", err: errors.New(`generated: missing required field "Attendance.activity_short_description"`)}
	}
	if _, ok := _c.mutation.ActivityHappensAt(); !ok {
		return &ValidationError{Name: "activity_happens_at", err: errors.New(`generated: missing required field "Attendance.activity_happens_at"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Attendance.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Attendance.updated_at"`)}
	}
	return nil
}

func (_c *AttendanceCreate) sqlSave(ctx context.Context) (*Attendance, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AttendanceCreate) createSpec() (*Attendance, *sqlgraph.CreateSpec) {
	var (
		_node = &Attendance{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(attendance.Table, sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.AttendeeID(); ok {
		_spec.SetField(attendance.FieldAttendeeID, field.TypeUUID, value)
		_node.AttendeeID = value
	}
	if value, ok := _c.mutation.ActivityID(); ok {
		_spec.SetField(attendance.FieldActivityID, field.TypeUUID, value)
		_node.ActivityID = value
	}
	if value, ok := _c.mutation.ActivitySlug(); ok {
		_spec.SetField(attendance.FieldActivitySlug, field.TypeString, value)
		_node.ActivitySlug = value
	}
	if value, ok := _c.mutation.ActivityTitle(); ok {
		_spec.SetField(attendance.FieldActivityTitle, field.TypeString, value)
		_node.ActivityTitle = value
	}
	if value, ok := _c.mutation.ActivityPosterImageURL(); ok {
		_spec.SetField(attendance.FieldActivityPosterImageURL, field.TypeString, value)
		_node.ActivityPosterImageURL = value
	}
	if value, ok := _c.mutation.ActivityShortDescription(); ok {
		_spec.SetField(attendance.FieldActivityShortDescription, field.TypeString, value)
		_node.ActivityShortDescription = value
	}
	if value, ok := _c.mutation.ActivityHappensAt(); ok {
		_spec.SetField(attendance.FieldActivityHappensAt, field.TypeTime, value)
		_node.ActivityHappensAt = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(attendance.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(attendance.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(attendance.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	return _node, _spec
}

// AttendanceCreateBulk is the builder for creating many Attendance entities in bulk.
type AttendanceCreateBulk struct {
	config
	err      error
	builders []*AttendanceCreate
}

// Save creates the Attendance entities in the database.
func (_c *AttendanceCreateBulk) Save(ctx context.Context) ([]*Attendance, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Attendance, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttendanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AttendanceCreateBulk) SaveX(ctx context.Context) []*Attendance {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AttendanceCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AttendanceCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
