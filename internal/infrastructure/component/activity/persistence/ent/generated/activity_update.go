// Code generated by ent, DO NOT EDIT.

package generated

import (
	"app/internal/infrastructure/component/activity/persistence/ent/generated/activity"
	"app/internal/infrastructure/component/activity/persistence/ent/generated/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActivityUpdate is the builder for updating Activity entities.
type ActivityUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityMutation
}

// Where appends a list predicates to the ActivityUpdate builder.
func (_u *ActivityUpdate) Where(ps ...predicate.Activity) *ActivityUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSlug sets the "slug" field.
func (_u *ActivityUpdate) SetSlug(v string) *ActivityUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *ActivityUpdate) SetNillableSlug(v *string) *ActivityUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *ActivityUpdate) SetTitle(v string) *ActivityUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ActivityUpdate) SetNillableTitle(v *string) *ActivityUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetPosterImageURL sets the "poster_image_url" field.
func (_u *ActivityUpdate) SetPosterImageURL(v string) *ActivityUpdate {
	_u.mutation.SetPosterImageURL(v)
	return _u
}

// SetNillablePosterImageURL sets the "poster_image_url" field if the given value is not nil.
func (_u *ActivityUpdate) SetNillablePosterImageURL(v *string) *ActivityUpdate {
	if v != nil {
		_u.SetPosterImageURL(*v)
	}
	return _u
}

// SetShortDescription sets the "short_description" field.
func (_u *ActivityUpdate) SetShortDescription(v string) *ActivityUpdate {
	_u.mutation.SetShortDescription(v)
	return _u
}

// SetNillableShortDescription sets the "short_description" field if the given value is not nil.
func (_u *ActivityUpdate) SetNillableShortDescription(v *string) *ActivityUpdate {
	if v != nil {
		_u.SetShortDescription(*v)
	}
	return _u
}

// SetFullDescription sets the "full_description" field.
func (_u *ActivityUpdate) SetFullDescription(v string) *ActivityUpdate {
	_u.mutation.SetFullDescription(v)
	return _u
}

// SetNillableFullDescription sets the "full_description" field if the given value is not nil.
func (_u *ActivityUpdate) SetNillableFullDescription(v *string) *ActivityUpdate {
	if v != nil {
		_u.SetFullDescription(*v)
	}
	return _u
}

// SetHappensAt sets the "happens_at" field.
func (_u *ActivityUpdate) SetHappensAt(v time.Time) *ActivityUpdate {
	_u.mutation.SetHappensAt(v)
	return _u
}

// SetNillableHappensAt sets the "happens_at" field if the given value is not nil.
func (_u *ActivityUpdate) SetNillableHappensAt(v *time.Time) *ActivityUpdate {
	if v != nil {
		_u.SetHappensAt(*v)
	}
	return _u
}

// SetAttendants sets the "attendants" field.
func (_u *ActivityUpdate) SetAttendants(v int) *ActivityUpdate {
	_u.mutation.ResetAttendants()
	_u.mutation.SetAttendants(v)
	return _u
}

// SetNillableAttendants sets the "attendants" field if the given value is not nil.
func (_u *ActivityUpdate) SetNillableAttendants(v *int) *ActivityUpdate {
	if v != nil {
		_u.SetAttendants(*v)
	}
	return _u
}

// AddAttendants adds value to the "attendants" field.
func (_u *ActivityUpdate) AddAttendants(v int) *ActivityUpdate {
	_u.mutation.AddAttendants(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ActivityUpdate) SetCreatedAt(v time.Time) *ActivityUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ActivityUpdate) SetNillableCreatedAt(v *time.Time) *ActivityUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ActivityUpdate) SetUpdatedAt(v time.Time) *ActivityUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ActivityUpdate) SetNillableUpdatedAt(v *time.Time) *ActivityUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ActivityUpdate) SetDeletedAt(v time.Time) *ActivityUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ActivityUpdate) SetNillableDeletedAt(v *time.Time) *ActivityUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ActivityUpdate) ClearDeletedAt() *ActivityUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// Mutation returns the ActivityMutation object of the builder.
func (_u *ActivityUpdate) Mutation() *ActivityMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ActivityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ActivityUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ActivityUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *ActivityUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(activity.Table, activity.Columns, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(activity.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(activity.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.PosterImageURL(); ok {
		_spec.SetField(activity.FieldPosterImageURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.ShortDescription(); ok {
		_spec.SetField(activity.FieldShortDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.FullDescription(); ok {
		_spec.SetField(activity.FieldFullDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.HappensAt(); ok {
		_spec.SetField(activity.FieldHappensAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Attendants(); ok {
		_spec.SetField(activity.FieldAttendants, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAttendants(); ok {
		_spec.AddField(activity.FieldAttendants, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(activity.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(activity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(activity.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(activity.FieldDeletedAt, field.TypeTime)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ActivityUpdateOne is the builder for updating a single Activity entity.
type ActivityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityMutation
}

// SetSlug sets the "slug" field.
func (_u *ActivityUpdateOne) SetSlug(v string) *ActivityUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *ActivityUpdateOne) SetNillableSlug(v *string) *ActivityUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *ActivityUpdateOne) SetTitle(v string) *ActivityUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ActivityUpdateOne) SetNillableTitle(v *string) *ActivityUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetPosterImageURL sets the "poster_image_url" field.
func (_u *ActivityUpdateOne) SetPosterImageURL(v string) *ActivityUpdateOne {
	_u.mutation.SetPosterImageURL(v)
	return _u
}

// SetNillablePosterImageURL sets the "poster_image_url" field if the given value is not nil.
func (_u *ActivityUpdateOne) SetNillablePosterImageURL(v *string) *ActivityUpdateOne {
	if v != nil {
		_u.SetPosterImageURL(*v)
	}
	return _u
}

// SetShortDescription sets the "short_description" field.
func (_u *ActivityUpdateOne) SetShortDescription(v string) *ActivityUpdateOne {
	_u.mutation.SetShortDescription(v)
	return _u
}

// SetNillableShortDescription sets the "short_description" field if the given value is not nil.
func (_u *ActivityUpdateOne) SetNillableShortDescription(v *string) *ActivityUpdateOne {
	if v != nil {
		_u.SetShortDescription(*v)
	}
	return _u
}

// SetFullDescription sets the "full_description" field.
func (_u *ActivityUpdateOne) SetFullDescription(v string) *ActivityUpdateOne {
	_u.mutation.SetFullDescription(v)
	return _u
}

// SetNillableFullDescription sets the "full_description" field if the given value is not nil.
func (_u *ActivityUpdateOne) SetNillableFullDescription(v *string) *ActivityUpdateOne {
	if v != nil {
		_u.SetFullDescription(*v)
	}
	return _u
}

// SetHappensAt sets the "happens_at" field.
func (_u *ActivityUpdateOne) SetHappensAt(v time.Time) *ActivityUpdateOne {
	_u.mutation.SetHappensAt(v)
	return _u
}

// SetNillableHappensAt sets the "happens_at" field if the given value is not nil.
func (_u *ActivityUpdateOne) SetNillableHappensAt(v *time.Time) *ActivityUpdateOne {
	if v != nil {
		_u.SetHappensAt(*v)
	}
	return _u
}

// SetAttendants sets the "attendants" field.
func (_u *ActivityUpdateOne) SetAttendants(v int) *ActivityUpdateOne {
	_u.mutation.ResetAttendants()
	_u.mutation.SetAttendants(v)
	return _u
}

// SetNillableAttendants sets the "attendants" field if the given value is not nil.
func (_u *ActivityUpdateOne) SetNillableAttendants(v *int) *ActivityUpdateOne {
	if v != nil {
		_u.SetAttendants(*v)
	}
	return _u
}

// AddAttendants adds value to the "attendants" field.
func (_u *ActivityUpdateOne) AddAttendants(v int) *ActivityUpdateOne {
	_u.mutation.AddAttendants(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ActivityUpdateOne) SetCreatedAt(v time.Time) *ActivityUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ActivityUpdateOne) SetNillableCreatedAt(v *time.Time) *ActivityUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ActivityUpdateOne) SetUpdatedAt(v time.Time) *ActivityUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ActivityUpdateOne) SetNillableUpdatedAt(v *time.Time) *ActivityUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ActivityUpdateOne) SetDeletedAt(v time.Time) *ActivityUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ActivityUpdateOne) SetNillableDeletedAt(v *time.Time) *ActivityUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ActivityUpdateOne) ClearDeletedAt() *ActivityUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// Mutation returns the ActivityMutation object of the builder.
func (_u *ActivityUpdateOne) Mutation() *ActivityMutation {
	return _u.mutation
}

// Where appends a list predicates to the ActivityUpdate builder.
func (_u *ActivityUpdateOne) Where(ps ...predicate.Activity) *ActivityUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ActivityUpdateOne) Select(field string, fields ...string) *ActivityUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Activity entity.
func (_u *ActivityUpdateOne) Save(ctx context.Context) (*Activity, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ActivityUpdateOne) SaveX(ctx context.Context) *Activity {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ActivityUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *ActivityUpdateOne) sqlSave(ctx context.Context) (_node *Activity, err error) {
	_spec := sqlgraph.NewUpdateSpec(activity.Table, activity.Columns, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`activity: missing "Activity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activity.FieldID)
		for _, f := range fields {
			if !activity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("activity: invalid field %q for query", f)}
			}
			if f != activity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(activity.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(activity.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.PosterImageURL(); ok {
		_spec.SetField(activity.FieldPosterImageURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.ShortDescription(); ok {
		_spec.SetField(activity.FieldShortDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.FullDescription(); ok {
		_spec.SetField(activity.FieldFullDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.HappensAt(); ok {
		_spec.SetField(activity.FieldHappensAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Attendants(); ok {
		_spec.SetField(activity.FieldAttendants, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAttendants(); ok {
		_spec.AddField(activity.FieldAttendants, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(activity.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(activity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(activity.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(activity.FieldDeletedAt, field.TypeTime)
	}
	_node = &Activity{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
