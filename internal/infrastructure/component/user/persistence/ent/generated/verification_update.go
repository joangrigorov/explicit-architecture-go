// Code generated by ent, DO NOT EDIT.

package generated

import (
	"app/internal/infrastructure/component/user/persistence/ent/generated/predicate"
	"app/internal/infrastructure/component/user/persistence/ent/generated/verification"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// VerificationUpdate is the builder for updating Verification entities.
type VerificationUpdate struct {
	config
	hooks    []Hook
	mutation *VerificationMutation
}

// Where appends a list predicates to the VerificationUpdate builder.
func (_u *VerificationUpdate) Where(ps ...predicate.Verification) *VerificationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *VerificationUpdate) SetUserID(v uuid.UUID) *VerificationUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *VerificationUpdate) SetNillableUserID(v *uuid.UUID) *VerificationUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetCsrfToken sets the "csrf_token" field.
func (_u *VerificationUpdate) SetCsrfToken(v string) *VerificationUpdate {
	_u.mutation.SetCsrfToken(v)
	return _u
}

// SetNillableCsrfToken sets the "csrf_token" field if the given value is not nil.
func (_u *VerificationUpdate) SetNillableCsrfToken(v *string) *VerificationUpdate {
	if v != nil {
		_u.SetCsrfToken(*v)
	}
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *VerificationUpdate) SetExpiresAt(v time.Time) *VerificationUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *VerificationUpdate) SetNillableExpiresAt(v *time.Time) *VerificationUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetUsedAt sets the "used_at" field.
func (_u *VerificationUpdate) SetUsedAt(v time.Time) *VerificationUpdate {
	_u.mutation.SetUsedAt(v)
	return _u
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (_u *VerificationUpdate) SetNillableUsedAt(v *time.Time) *VerificationUpdate {
	if v != nil {
		_u.SetUsedAt(*v)
	}
	return _u
}

// ClearUsedAt clears the value of the "used_at" field.
func (_u *VerificationUpdate) ClearUsedAt() *VerificationUpdate {
	_u.mutation.ClearUsedAt()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *VerificationUpdate) SetCreatedAt(v time.Time) *VerificationUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *VerificationUpdate) SetNillableCreatedAt(v *time.Time) *VerificationUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// Mutation returns the VerificationMutation object of the builder.
func (_u *VerificationUpdate) Mutation() *VerificationMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *VerificationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VerificationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *VerificationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VerificationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *VerificationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(verification.Table, verification.Columns, sqlgraph.NewFieldSpec(verification.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(verification.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := _u.mutation.CsrfToken(); ok {
		_spec.SetField(verification.FieldCsrfToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(verification.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UsedAt(); ok {
		_spec.SetField(verification.FieldUsedAt, field.TypeTime, value)
	}
	if _u.mutation.UsedAtCleared() {
		_spec.ClearField(verification.FieldUsedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(verification.FieldCreatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// VerificationUpdateOne is the builder for updating a single Verification entity.
type VerificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VerificationMutation
}

// SetUserID sets the "user_id" field.
func (_u *VerificationUpdateOne) SetUserID(v uuid.UUID) *VerificationUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *VerificationUpdateOne) SetNillableUserID(v *uuid.UUID) *VerificationUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetCsrfToken sets the "csrf_token" field.
func (_u *VerificationUpdateOne) SetCsrfToken(v string) *VerificationUpdateOne {
	_u.mutation.SetCsrfToken(v)
	return _u
}

// SetNillableCsrfToken sets the "csrf_token" field if the given value is not nil.
func (_u *VerificationUpdateOne) SetNillableCsrfToken(v *string) *VerificationUpdateOne {
	if v != nil {
		_u.SetCsrfToken(*v)
	}
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *VerificationUpdateOne) SetExpiresAt(v time.Time) *VerificationUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *VerificationUpdateOne) SetNillableExpiresAt(v *time.Time) *VerificationUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetUsedAt sets the "used_at" field.
func (_u *VerificationUpdateOne) SetUsedAt(v time.Time) *VerificationUpdateOne {
	_u.mutation.SetUsedAt(v)
	return _u
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (_u *VerificationUpdateOne) SetNillableUsedAt(v *time.Time) *VerificationUpdateOne {
	if v != nil {
		_u.SetUsedAt(*v)
	}
	return _u
}

// ClearUsedAt clears the value of the "used_at" field.
func (_u *VerificationUpdateOne) ClearUsedAt() *VerificationUpdateOne {
	_u.mutation.ClearUsedAt()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *VerificationUpdateOne) SetCreatedAt(v time.Time) *VerificationUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *VerificationUpdateOne) SetNillableCreatedAt(v *time.Time) *VerificationUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// Mutation returns the VerificationMutation object of the builder.
func (_u *VerificationUpdateOne) Mutation() *VerificationMutation {
	return _u.mutation
}

// Where appends a list predicates to the VerificationUpdate builder.
func (_u *VerificationUpdateOne) Where(ps ...predicate.Verification) *VerificationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *VerificationUpdateOne) Select(field string, fields ...string) *VerificationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Verification entity.
func (_u *VerificationUpdateOne) Save(ctx context.Context) (*Verification, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VerificationUpdateOne) SaveX(ctx context.Context) *Verification {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *VerificationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VerificationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *VerificationUpdateOne) sqlSave(ctx context.Context) (_node *Verification, err error) {
	_spec := sqlgraph.NewUpdateSpec(verification.Table, verification.Columns, sqlgraph.NewFieldSpec(verification.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Verification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, verification.FieldID)
		for _, f := range fields {
			if !verification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != verification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(verification.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := _u.mutation.CsrfToken(); ok {
		_spec.SetField(verification.FieldCsrfToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(verification.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UsedAt(); ok {
		_spec.SetField(verification.FieldUsedAt, field.TypeTime, value)
	}
	if _u.mutation.UsedAtCleared() {
		_spec.ClearField(verification.FieldUsedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(verification.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Verification{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
