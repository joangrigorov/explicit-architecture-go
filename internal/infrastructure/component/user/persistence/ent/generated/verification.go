// Code generated by ent, DO NOT EDIT.

package generated

import (
	"app/internal/infrastructure/component/user/persistence/ent/generated/verification"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Verification is the model entity for the Verification schema.
type Verification struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// UserEmailMasked holds the value of the "user_email_masked" field.
	UserEmailMasked string `json:"user_email_masked,omitempty"`
	// CsrfToken holds the value of the "csrf_token" field.
	CsrfToken string `json:"csrf_token,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// UsedAt holds the value of the "used_at" field.
	UsedAt *time.Time `json:"used_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Verification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case verification.FieldUserEmailMasked, verification.FieldCsrfToken:
			values[i] = new(sql.NullString)
		case verification.FieldExpiresAt, verification.FieldUsedAt, verification.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case verification.FieldID, verification.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Verification fields.
func (_m *Verification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case verification.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case verification.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				_m.UserID = *value
			}
		case verification.FieldUserEmailMasked:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_email_masked", values[i])
			} else if value.Valid {
				_m.UserEmailMasked = value.String
			}
		case verification.FieldCsrfToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field csrf_token", values[i])
			} else if value.Valid {
				_m.CsrfToken = value.String
			}
		case verification.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				_m.ExpiresAt = value.Time
			}
		case verification.FieldUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field used_at", values[i])
			} else if value.Valid {
				_m.UsedAt = new(time.Time)
				*_m.UsedAt = value.Time
			}
		case verification.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Verification.
// This includes values selected through modifiers, order, etc.
func (_m *Verification) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Verification.
// Note that you need to call Verification.Unwrap() before calling this method if this Verification
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Verification) Update() *VerificationUpdateOne {
	return NewVerificationClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Verification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Verification) Unwrap() *Verification {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: Verification is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Verification) String() string {
	var builder strings.Builder
	builder.WriteString("Verification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("user_email_masked=")
	builder.WriteString(_m.UserEmailMasked)
	builder.WriteString(", ")
	builder.WriteString("csrf_token=")
	builder.WriteString(_m.CsrfToken)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(_m.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.UsedAt; v != nil {
		builder.WriteString("used_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Verifications is a parsable slice of Verification.
type Verifications []*Verification
