// Code generated by ent, DO NOT EDIT.

package generated

import (
	"app/internal/infrastructure/component/user/persistence/ent/generated/confirmation"
	"app/internal/infrastructure/component/user/persistence/ent/generated/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ConfirmationUpdate is the builder for updating Confirmation entities.
type ConfirmationUpdate struct {
	config
	hooks    []Hook
	mutation *ConfirmationMutation
}

// Where appends a list predicates to the ConfirmationUpdate builder.
func (_u *ConfirmationUpdate) Where(ps ...predicate.Confirmation) *ConfirmationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ConfirmationUpdate) SetUserID(v uuid.UUID) *ConfirmationUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ConfirmationUpdate) SetNillableUserID(v *uuid.UUID) *ConfirmationUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetHmacSecret sets the "hmac_secret" field.
func (_u *ConfirmationUpdate) SetHmacSecret(v string) *ConfirmationUpdate {
	_u.mutation.SetHmacSecret(v)
	return _u
}

// SetNillableHmacSecret sets the "hmac_secret" field if the given value is not nil.
func (_u *ConfirmationUpdate) SetNillableHmacSecret(v *string) *ConfirmationUpdate {
	if v != nil {
		_u.SetHmacSecret(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ConfirmationUpdate) SetCreatedAt(v time.Time) *ConfirmationUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ConfirmationUpdate) SetNillableCreatedAt(v *time.Time) *ConfirmationUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// Mutation returns the ConfirmationMutation object of the builder.
func (_u *ConfirmationUpdate) Mutation() *ConfirmationMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ConfirmationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ConfirmationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ConfirmationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ConfirmationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *ConfirmationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(confirmation.Table, confirmation.Columns, sqlgraph.NewFieldSpec(confirmation.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(confirmation.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := _u.mutation.HmacSecret(); ok {
		_spec.SetField(confirmation.FieldHmacSecret, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(confirmation.FieldCreatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{confirmation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ConfirmationUpdateOne is the builder for updating a single Confirmation entity.
type ConfirmationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConfirmationMutation
}

// SetUserID sets the "user_id" field.
func (_u *ConfirmationUpdateOne) SetUserID(v uuid.UUID) *ConfirmationUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ConfirmationUpdateOne) SetNillableUserID(v *uuid.UUID) *ConfirmationUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetHmacSecret sets the "hmac_secret" field.
func (_u *ConfirmationUpdateOne) SetHmacSecret(v string) *ConfirmationUpdateOne {
	_u.mutation.SetHmacSecret(v)
	return _u
}

// SetNillableHmacSecret sets the "hmac_secret" field if the given value is not nil.
func (_u *ConfirmationUpdateOne) SetNillableHmacSecret(v *string) *ConfirmationUpdateOne {
	if v != nil {
		_u.SetHmacSecret(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ConfirmationUpdateOne) SetCreatedAt(v time.Time) *ConfirmationUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ConfirmationUpdateOne) SetNillableCreatedAt(v *time.Time) *ConfirmationUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// Mutation returns the ConfirmationMutation object of the builder.
func (_u *ConfirmationUpdateOne) Mutation() *ConfirmationMutation {
	return _u.mutation
}

// Where appends a list predicates to the ConfirmationUpdate builder.
func (_u *ConfirmationUpdateOne) Where(ps ...predicate.Confirmation) *ConfirmationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ConfirmationUpdateOne) Select(field string, fields ...string) *ConfirmationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Confirmation entity.
func (_u *ConfirmationUpdateOne) Save(ctx context.Context) (*Confirmation, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ConfirmationUpdateOne) SaveX(ctx context.Context) *Confirmation {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ConfirmationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ConfirmationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *ConfirmationUpdateOne) sqlSave(ctx context.Context) (_node *Confirmation, err error) {
	_spec := sqlgraph.NewUpdateSpec(confirmation.Table, confirmation.Columns, sqlgraph.NewFieldSpec(confirmation.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Confirmation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, confirmation.FieldID)
		for _, f := range fields {
			if !confirmation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != confirmation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(confirmation.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := _u.mutation.HmacSecret(); ok {
		_spec.SetField(confirmation.FieldHmacSecret, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(confirmation.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Confirmation{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{confirmation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
