// Code generated by ent, DO NOT EDIT.

package verification

import (
	"app/internal/infrastructure/component/user/persistence/ent/generated/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldEQ(FieldUserID, v))
}

// UserEmailMasked applies equality check predicate on the "user_email_masked" field. It's identical to UserEmailMaskedEQ.
func UserEmailMasked(v string) predicate.Verification {
	return predicate.Verification(sql.FieldEQ(FieldUserEmailMasked, v))
}

// CsrfToken applies equality check predicate on the "csrf_token" field. It's identical to CsrfTokenEQ.
func CsrfToken(v string) predicate.Verification {
	return predicate.Verification(sql.FieldEQ(FieldCsrfToken, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldEQ(FieldExpiresAt, v))
}

// UsedAt applies equality check predicate on the "used_at" field. It's identical to UsedAtEQ.
func UsedAt(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldEQ(FieldUsedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldEQ(FieldCreatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.Verification {
	return predicate.Verification(sql.FieldLTE(FieldUserID, v))
}

// UserEmailMaskedEQ applies the EQ predicate on the "user_email_masked" field.
func UserEmailMaskedEQ(v string) predicate.Verification {
	return predicate.Verification(sql.FieldEQ(FieldUserEmailMasked, v))
}

// UserEmailMaskedNEQ applies the NEQ predicate on the "user_email_masked" field.
func UserEmailMaskedNEQ(v string) predicate.Verification {
	return predicate.Verification(sql.FieldNEQ(FieldUserEmailMasked, v))
}

// UserEmailMaskedIn applies the In predicate on the "user_email_masked" field.
func UserEmailMaskedIn(vs ...string) predicate.Verification {
	return predicate.Verification(sql.FieldIn(FieldUserEmailMasked, vs...))
}

// UserEmailMaskedNotIn applies the NotIn predicate on the "user_email_masked" field.
func UserEmailMaskedNotIn(vs ...string) predicate.Verification {
	return predicate.Verification(sql.FieldNotIn(FieldUserEmailMasked, vs...))
}

// UserEmailMaskedGT applies the GT predicate on the "user_email_masked" field.
func UserEmailMaskedGT(v string) predicate.Verification {
	return predicate.Verification(sql.FieldGT(FieldUserEmailMasked, v))
}

// UserEmailMaskedGTE applies the GTE predicate on the "user_email_masked" field.
func UserEmailMaskedGTE(v string) predicate.Verification {
	return predicate.Verification(sql.FieldGTE(FieldUserEmailMasked, v))
}

// UserEmailMaskedLT applies the LT predicate on the "user_email_masked" field.
func UserEmailMaskedLT(v string) predicate.Verification {
	return predicate.Verification(sql.FieldLT(FieldUserEmailMasked, v))
}

// UserEmailMaskedLTE applies the LTE predicate on the "user_email_masked" field.
func UserEmailMaskedLTE(v string) predicate.Verification {
	return predicate.Verification(sql.FieldLTE(FieldUserEmailMasked, v))
}

// UserEmailMaskedContains applies the Contains predicate on the "user_email_masked" field.
func UserEmailMaskedContains(v string) predicate.Verification {
	return predicate.Verification(sql.FieldContains(FieldUserEmailMasked, v))
}

// UserEmailMaskedHasPrefix applies the HasPrefix predicate on the "user_email_masked" field.
func UserEmailMaskedHasPrefix(v string) predicate.Verification {
	return predicate.Verification(sql.FieldHasPrefix(FieldUserEmailMasked, v))
}

// UserEmailMaskedHasSuffix applies the HasSuffix predicate on the "user_email_masked" field.
func UserEmailMaskedHasSuffix(v string) predicate.Verification {
	return predicate.Verification(sql.FieldHasSuffix(FieldUserEmailMasked, v))
}

// UserEmailMaskedEqualFold applies the EqualFold predicate on the "user_email_masked" field.
func UserEmailMaskedEqualFold(v string) predicate.Verification {
	return predicate.Verification(sql.FieldEqualFold(FieldUserEmailMasked, v))
}

// UserEmailMaskedContainsFold applies the ContainsFold predicate on the "user_email_masked" field.
func UserEmailMaskedContainsFold(v string) predicate.Verification {
	return predicate.Verification(sql.FieldContainsFold(FieldUserEmailMasked, v))
}

// CsrfTokenEQ applies the EQ predicate on the "csrf_token" field.
func CsrfTokenEQ(v string) predicate.Verification {
	return predicate.Verification(sql.FieldEQ(FieldCsrfToken, v))
}

// CsrfTokenNEQ applies the NEQ predicate on the "csrf_token" field.
func CsrfTokenNEQ(v string) predicate.Verification {
	return predicate.Verification(sql.FieldNEQ(FieldCsrfToken, v))
}

// CsrfTokenIn applies the In predicate on the "csrf_token" field.
func CsrfTokenIn(vs ...string) predicate.Verification {
	return predicate.Verification(sql.FieldIn(FieldCsrfToken, vs...))
}

// CsrfTokenNotIn applies the NotIn predicate on the "csrf_token" field.
func CsrfTokenNotIn(vs ...string) predicate.Verification {
	return predicate.Verification(sql.FieldNotIn(FieldCsrfToken, vs...))
}

// CsrfTokenGT applies the GT predicate on the "csrf_token" field.
func CsrfTokenGT(v string) predicate.Verification {
	return predicate.Verification(sql.FieldGT(FieldCsrfToken, v))
}

// CsrfTokenGTE applies the GTE predicate on the "csrf_token" field.
func CsrfTokenGTE(v string) predicate.Verification {
	return predicate.Verification(sql.FieldGTE(FieldCsrfToken, v))
}

// CsrfTokenLT applies the LT predicate on the "csrf_token" field.
func CsrfTokenLT(v string) predicate.Verification {
	return predicate.Verification(sql.FieldLT(FieldCsrfToken, v))
}

// CsrfTokenLTE applies the LTE predicate on the "csrf_token" field.
func CsrfTokenLTE(v string) predicate.Verification {
	return predicate.Verification(sql.FieldLTE(FieldCsrfToken, v))
}

// CsrfTokenContains applies the Contains predicate on the "csrf_token" field.
func CsrfTokenContains(v string) predicate.Verification {
	return predicate.Verification(sql.FieldContains(FieldCsrfToken, v))
}

// CsrfTokenHasPrefix applies the HasPrefix predicate on the "csrf_token" field.
func CsrfTokenHasPrefix(v string) predicate.Verification {
	return predicate.Verification(sql.FieldHasPrefix(FieldCsrfToken, v))
}

// CsrfTokenHasSuffix applies the HasSuffix predicate on the "csrf_token" field.
func CsrfTokenHasSuffix(v string) predicate.Verification {
	return predicate.Verification(sql.FieldHasSuffix(FieldCsrfToken, v))
}

// CsrfTokenEqualFold applies the EqualFold predicate on the "csrf_token" field.
func CsrfTokenEqualFold(v string) predicate.Verification {
	return predicate.Verification(sql.FieldEqualFold(FieldCsrfToken, v))
}

// CsrfTokenContainsFold applies the ContainsFold predicate on the "csrf_token" field.
func CsrfTokenContainsFold(v string) predicate.Verification {
	return predicate.Verification(sql.FieldContainsFold(FieldCsrfToken, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldLTE(FieldExpiresAt, v))
}

// UsedAtEQ applies the EQ predicate on the "used_at" field.
func UsedAtEQ(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldEQ(FieldUsedAt, v))
}

// UsedAtNEQ applies the NEQ predicate on the "used_at" field.
func UsedAtNEQ(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldNEQ(FieldUsedAt, v))
}

// UsedAtIn applies the In predicate on the "used_at" field.
func UsedAtIn(vs ...time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldIn(FieldUsedAt, vs...))
}

// UsedAtNotIn applies the NotIn predicate on the "used_at" field.
func UsedAtNotIn(vs ...time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldNotIn(FieldUsedAt, vs...))
}

// UsedAtGT applies the GT predicate on the "used_at" field.
func UsedAtGT(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldGT(FieldUsedAt, v))
}

// UsedAtGTE applies the GTE predicate on the "used_at" field.
func UsedAtGTE(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldGTE(FieldUsedAt, v))
}

// UsedAtLT applies the LT predicate on the "used_at" field.
func UsedAtLT(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldLT(FieldUsedAt, v))
}

// UsedAtLTE applies the LTE predicate on the "used_at" field.
func UsedAtLTE(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldLTE(FieldUsedAt, v))
}

// UsedAtIsNil applies the IsNil predicate on the "used_at" field.
func UsedAtIsNil() predicate.Verification {
	return predicate.Verification(sql.FieldIsNull(FieldUsedAt))
}

// UsedAtNotNil applies the NotNil predicate on the "used_at" field.
func UsedAtNotNil() predicate.Verification {
	return predicate.Verification(sql.FieldNotNull(FieldUsedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Verification {
	return predicate.Verification(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Verification) predicate.Verification {
	return predicate.Verification(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Verification) predicate.Verification {
	return predicate.Verification(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Verification) predicate.Verification {
	return predicate.Verification(sql.NotPredicates(p))
}
