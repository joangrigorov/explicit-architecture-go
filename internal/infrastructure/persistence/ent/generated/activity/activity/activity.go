// Code generated by ent, DO NOT EDIT.

package activity

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the activity type in the database.
	Label = "activity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldPosterImageURL holds the string denoting the poster_image_url field in the database.
	FieldPosterImageURL = "poster_image_url"
	// FieldShortDescription holds the string denoting the short_description field in the database.
	FieldShortDescription = "short_description"
	// FieldFullDescription holds the string denoting the full_description field in the database.
	FieldFullDescription = "full_description"
	// FieldHappensAt holds the string denoting the happens_at field in the database.
	FieldHappensAt = "happens_at"
	// FieldAttendants holds the string denoting the attendants field in the database.
	FieldAttendants = "attendants"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// Table holds the table name of the activity in the database.
	Table = "activity"
)

// Columns holds all SQL columns for activity fields.
var Columns = []string{
	FieldID,
	FieldSlug,
	FieldTitle,
	FieldPosterImageURL,
	FieldShortDescription,
	FieldFullDescription,
	FieldHappensAt,
	FieldAttendants,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Activity queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByPosterImageURL orders the results by the poster_image_url field.
func ByPosterImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosterImageURL, opts...).ToFunc()
}

// ByShortDescription orders the results by the short_description field.
func ByShortDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShortDescription, opts...).ToFunc()
}

// ByFullDescription orders the results by the full_description field.
func ByFullDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullDescription, opts...).ToFunc()
}

// ByHappensAt orders the results by the happens_at field.
func ByHappensAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHappensAt, opts...).ToFunc()
}

// ByAttendants orders the results by the attendants field.
func ByAttendants(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttendants, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}
