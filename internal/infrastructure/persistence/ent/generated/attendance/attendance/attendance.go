// Code generated by ent, DO NOT EDIT.

package attendance

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the attendance type in the database.
	Label = "attendance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAttendeeID holds the string denoting the attendee_id field in the database.
	FieldAttendeeID = "attendee_id"
	// FieldActivityID holds the string denoting the activity_id field in the database.
	FieldActivityID = "activity_id"
	// FieldActivitySlug holds the string denoting the activity_slug field in the database.
	FieldActivitySlug = "activity_slug"
	// FieldActivityTitle holds the string denoting the activity_title field in the database.
	FieldActivityTitle = "activity_title"
	// FieldActivityPosterImageURL holds the string denoting the activity_poster_image_url field in the database.
	FieldActivityPosterImageURL = "activity_poster_image_url"
	// FieldActivityShortDescription holds the string denoting the activity_short_description field in the database.
	FieldActivityShortDescription = "activity_short_description"
	// FieldActivityHappensAt holds the string denoting the activity_happens_at field in the database.
	FieldActivityHappensAt = "activity_happens_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// Table holds the table name of the attendance in the database.
	Table = "attendance"
)

// Columns holds all SQL columns for attendance fields.
var Columns = []string{
	FieldID,
	FieldAttendeeID,
	FieldActivityID,
	FieldActivitySlug,
	FieldActivityTitle,
	FieldActivityPosterImageURL,
	FieldActivityShortDescription,
	FieldActivityHappensAt,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Attendance queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAttendeeID orders the results by the attendee_id field.
func ByAttendeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttendeeID, opts...).ToFunc()
}

// ByActivityID orders the results by the activity_id field.
func ByActivityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityID, opts...).ToFunc()
}

// ByActivitySlug orders the results by the activity_slug field.
func ByActivitySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivitySlug, opts...).ToFunc()
}

// ByActivityTitle orders the results by the activity_title field.
func ByActivityTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityTitle, opts...).ToFunc()
}

// ByActivityPosterImageURL orders the results by the activity_poster_image_url field.
func ByActivityPosterImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityPosterImageURL, opts...).ToFunc()
}

// ByActivityShortDescription orders the results by the activity_short_description field.
func ByActivityShortDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityShortDescription, opts...).ToFunc()
}

// ByActivityHappensAt orders the results by the activity_happens_at field.
func ByActivityHappensAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityHappensAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}
