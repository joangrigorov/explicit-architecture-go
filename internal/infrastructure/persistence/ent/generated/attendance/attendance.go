// Code generated by ent, DO NOT EDIT.

package attendance

import (
	"app/internal/infrastructure/persistence/ent/generated/attendance/attendance"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Attendance is the model entity for the Attendance schema.
type Attendance struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AttendeeID holds the value of the "attendee_id" field.
	AttendeeID uuid.UUID `json:"attendee_id,omitempty"`
	// ActivityID holds the value of the "activity_id" field.
	ActivityID uuid.UUID `json:"activity_id,omitempty"`
	// ActivitySlug holds the value of the "activity_slug" field.
	ActivitySlug string `json:"activity_slug,omitempty"`
	// ActivityTitle holds the value of the "activity_title" field.
	ActivityTitle string `json:"activity_title,omitempty"`
	// ActivityPosterImageURL holds the value of the "activity_poster_image_url" field.
	ActivityPosterImageURL string `json:"activity_poster_image_url,omitempty"`
	// ActivityShortDescription holds the value of the "activity_short_description" field.
	ActivityShortDescription string `json:"activity_short_description,omitempty"`
	// Start time of the activity
	ActivityHappensAt time.Time `json:"activity_happens_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt    *time.Time `json:"deleted_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Attendance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attendance.FieldActivitySlug, attendance.FieldActivityTitle, attendance.FieldActivityPosterImageURL, attendance.FieldActivityShortDescription:
			values[i] = new(sql.NullString)
		case attendance.FieldActivityHappensAt, attendance.FieldCreatedAt, attendance.FieldUpdatedAt, attendance.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case attendance.FieldID, attendance.FieldAttendeeID, attendance.FieldActivityID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Attendance fields.
func (a *Attendance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attendance.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case attendance.FieldAttendeeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field attendee_id", values[i])
			} else if value != nil {
				a.AttendeeID = *value
			}
		case attendance.FieldActivityID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field activity_id", values[i])
			} else if value != nil {
				a.ActivityID = *value
			}
		case attendance.FieldActivitySlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_slug", values[i])
			} else if value.Valid {
				a.ActivitySlug = value.String
			}
		case attendance.FieldActivityTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_title", values[i])
			} else if value.Valid {
				a.ActivityTitle = value.String
			}
		case attendance.FieldActivityPosterImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_poster_image_url", values[i])
			} else if value.Valid {
				a.ActivityPosterImageURL = value.String
			}
		case attendance.FieldActivityShortDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_short_description", values[i])
			} else if value.Valid {
				a.ActivityShortDescription = value.String
			}
		case attendance.FieldActivityHappensAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field activity_happens_at", values[i])
			} else if value.Valid {
				a.ActivityHappensAt = value.Time
			}
		case attendance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case attendance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case attendance.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = new(time.Time)
				*a.DeletedAt = value.Time
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Attendance.
// This includes values selected through modifiers, order, etc.
func (a *Attendance) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Attendance.
// Note that you need to call Attendance.Unwrap() before calling this method if this Attendance
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Attendance) Update() *AttendanceUpdateOne {
	return NewAttendanceClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Attendance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Attendance) Unwrap() *Attendance {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("attendance: Attendance is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Attendance) String() string {
	var builder strings.Builder
	builder.WriteString("Attendance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("attendee_id=")
	builder.WriteString(fmt.Sprintf("%v", a.AttendeeID))
	builder.WriteString(", ")
	builder.WriteString("activity_id=")
	builder.WriteString(fmt.Sprintf("%v", a.ActivityID))
	builder.WriteString(", ")
	builder.WriteString("activity_slug=")
	builder.WriteString(a.ActivitySlug)
	builder.WriteString(", ")
	builder.WriteString("activity_title=")
	builder.WriteString(a.ActivityTitle)
	builder.WriteString(", ")
	builder.WriteString("activity_poster_image_url=")
	builder.WriteString(a.ActivityPosterImageURL)
	builder.WriteString(", ")
	builder.WriteString("activity_short_description=")
	builder.WriteString(a.ActivityShortDescription)
	builder.WriteString(", ")
	builder.WriteString("activity_happens_at=")
	builder.WriteString(a.ActivityHappensAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := a.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Attendances is a parsable slice of Attendance.
type Attendances []*Attendance
