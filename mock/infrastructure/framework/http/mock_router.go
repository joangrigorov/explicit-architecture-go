// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/presentation/api/port/http/router.go
//
// Generated by this command:
//
//	mockgen -source=../internal/presentation/api/port/http/router.go -destination=presentation/api/port/http/mock_router.go -package=http
//

// Package http is a generated GoMock package.
package http

import (
	"app/internal/infrastructure/framework/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
	isgomock struct{}
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// DELETE mocks base method.
func (m *MockRouter) DELETE(arg0 string, arg1 ...http.Handler) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DELETE", varargs...)
}

// DELETE indicates an expected call of DELETE.
func (mr *MockRouterMockRecorder) DELETE(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockRouter)(nil).DELETE), varargs...)
}

// GET mocks base method.
func (m *MockRouter) GET(arg0 string, arg1 ...http.Handler) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "GET", varargs...)
}

// GET indicates an expected call of GET.
func (mr *MockRouterMockRecorder) GET(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockRouter)(nil).GET), varargs...)
}

// Group mocks base method.
func (m *MockRouter) Group(arg0 string) http.Router {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", arg0)
	ret0, _ := ret[0].(http.Router)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockRouterMockRecorder) Group(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockRouter)(nil).Group), arg0)
}

// PATCH mocks base method.
func (m *MockRouter) PATCH(arg0 string, arg1 ...http.Handler) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "PATCH", varargs...)
}

// PATCH indicates an expected call of PATCH.
func (mr *MockRouterMockRecorder) PATCH(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PATCH", reflect.TypeOf((*MockRouter)(nil).PATCH), varargs...)
}

// POST mocks base method.
func (m *MockRouter) POST(arg0 string, arg1 ...http.Handler) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "POST", varargs...)
}

// POST indicates an expected call of POST.
func (mr *MockRouterMockRecorder) POST(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockRouter)(nil).POST), varargs...)
}

// PUT mocks base method.
func (m *MockRouter) PUT(arg0 string, arg1 ...http.Handler) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "PUT", varargs...)
}

// PUT indicates an expected call of PUT.
func (mr *MockRouterMockRecorder) PUT(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockRouter)(nil).PUT), varargs...)
}

// Use mocks base method.
func (m *MockRouter) Use(arg0 ...http.Handler) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Use", varargs...)
}

// Use indicates an expected call of Use.
func (mr *MockRouterMockRecorder) Use(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockRouter)(nil).Use), arg0...)
}
