// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/infrastructure/framework/validation/rules.go
//
// Generated by this command:
//
//	mockgen -source=../internal/infrastructure/framework/validation/rules.go -destination=infrastructure/framework/validation/mock_rules.go -package=validation
//

// Package validation is a generated GoMock package.
package validation

import (
	reflect "reflect"

	ut "github.com/go-playground/universal-translator"
	validator "github.com/go-playground/validator/v10"
	gomock "go.uber.org/mock/gomock"
)

// MockRule is a mock of Rule interface.
type MockRule struct {
	ctrl     *gomock.Controller
	recorder *MockRuleMockRecorder
	isgomock struct{}
}

// MockRuleMockRecorder is the mock recorder for MockRule.
type MockRuleMockRecorder struct {
	mock *MockRule
}

// NewMockRule creates a new mock instance.
func NewMockRule(ctrl *gomock.Controller) *MockRule {
	mock := &MockRule{ctrl: ctrl}
	mock.recorder = &MockRuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRule) EXPECT() *MockRuleMockRecorder {
	return m.recorder
}

// RegisterTranslations mocks base method.
func (m *MockRule) RegisterTranslations(tr ut.Translator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTranslations", tr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterTranslations indicates an expected call of RegisterTranslations.
func (mr *MockRuleMockRecorder) RegisterTranslations(tr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTranslations", reflect.TypeOf((*MockRule)(nil).RegisterTranslations), tr)
}

// Tag mocks base method.
func (m *MockRule) Tag() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(string)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockRuleMockRecorder) Tag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockRule)(nil).Tag))
}

// Translate mocks base method.
func (m *MockRule) Translate(tr ut.Translator, fe validator.FieldError) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translate", tr, fe)
	ret0, _ := ret[0].(string)
	return ret0
}

// Translate indicates an expected call of Translate.
func (mr *MockRuleMockRecorder) Translate(tr, fe any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockRule)(nil).Translate), tr, fe)
}

// Validate mocks base method.
func (m *MockRule) Validate(fl validator.FieldLevel) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", fl)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockRuleMockRecorder) Validate(fl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockRule)(nil).Validate), fl)
}
