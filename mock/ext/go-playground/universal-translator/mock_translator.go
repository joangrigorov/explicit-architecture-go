// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-playground/universal-translator (interfaces: Translator)
//
// Generated by this command:
//
//	mockgen -destination=ext/go-playground/universal-translator/mock_translator.go -package=ut github.com/go-playground/universal-translator Translator
//

// Package ut is a generated GoMock package.
package ut

import (
	reflect "reflect"
	time "time"

	locales "github.com/go-playground/locales"
	currency "github.com/go-playground/locales/currency"
	gomock "go.uber.org/mock/gomock"
)

// MockTranslator is a mock of Translator interface.
type MockTranslator struct {
	ctrl     *gomock.Controller
	recorder *MockTranslatorMockRecorder
	isgomock struct{}
}

// MockTranslatorMockRecorder is the mock recorder for MockTranslator.
type MockTranslatorMockRecorder struct {
	mock *MockTranslator
}

// NewMockTranslator creates a new mock instance.
func NewMockTranslator(ctrl *gomock.Controller) *MockTranslator {
	mock := &MockTranslator{ctrl: ctrl}
	mock.recorder = &MockTranslatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranslator) EXPECT() *MockTranslatorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTranslator) Add(key any, text string, override bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", key, text, override)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTranslatorMockRecorder) Add(key, text, override any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTranslator)(nil).Add), key, text, override)
}

// AddCardinal mocks base method.
func (m *MockTranslator) AddCardinal(key any, text string, rule locales.PluralRule, override bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCardinal", key, text, rule, override)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCardinal indicates an expected call of AddCardinal.
func (mr *MockTranslatorMockRecorder) AddCardinal(key, text, rule, override any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCardinal", reflect.TypeOf((*MockTranslator)(nil).AddCardinal), key, text, rule, override)
}

// AddOrdinal mocks base method.
func (m *MockTranslator) AddOrdinal(key any, text string, rule locales.PluralRule, override bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrdinal", key, text, rule, override)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrdinal indicates an expected call of AddOrdinal.
func (mr *MockTranslatorMockRecorder) AddOrdinal(key, text, rule, override any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrdinal", reflect.TypeOf((*MockTranslator)(nil).AddOrdinal), key, text, rule, override)
}

// AddRange mocks base method.
func (m *MockTranslator) AddRange(key any, text string, rule locales.PluralRule, override bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRange", key, text, rule, override)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRange indicates an expected call of AddRange.
func (mr *MockTranslatorMockRecorder) AddRange(key, text, rule, override any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRange", reflect.TypeOf((*MockTranslator)(nil).AddRange), key, text, rule, override)
}

// C mocks base method.
func (m *MockTranslator) C(key any, num float64, digits uint64, param string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "C", key, num, digits, param)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// C indicates an expected call of C.
func (mr *MockTranslatorMockRecorder) C(key, num, digits, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "C", reflect.TypeOf((*MockTranslator)(nil).C), key, num, digits, param)
}

// CardinalPluralRule mocks base method.
func (m *MockTranslator) CardinalPluralRule(num float64, v uint64) locales.PluralRule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CardinalPluralRule", num, v)
	ret0, _ := ret[0].(locales.PluralRule)
	return ret0
}

// CardinalPluralRule indicates an expected call of CardinalPluralRule.
func (mr *MockTranslatorMockRecorder) CardinalPluralRule(num, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CardinalPluralRule", reflect.TypeOf((*MockTranslator)(nil).CardinalPluralRule), num, v)
}

// FmtAccounting mocks base method.
func (m *MockTranslator) FmtAccounting(num float64, v uint64, arg2 currency.Type) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FmtAccounting", num, v, arg2)
	ret0, _ := ret[0].(string)
	return ret0
}

// FmtAccounting indicates an expected call of FmtAccounting.
func (mr *MockTranslatorMockRecorder) FmtAccounting(num, v, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FmtAccounting", reflect.TypeOf((*MockTranslator)(nil).FmtAccounting), num, v, arg2)
}

// FmtCurrency mocks base method.
func (m *MockTranslator) FmtCurrency(num float64, v uint64, arg2 currency.Type) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FmtCurrency", num, v, arg2)
	ret0, _ := ret[0].(string)
	return ret0
}

// FmtCurrency indicates an expected call of FmtCurrency.
func (mr *MockTranslatorMockRecorder) FmtCurrency(num, v, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FmtCurrency", reflect.TypeOf((*MockTranslator)(nil).FmtCurrency), num, v, arg2)
}

// FmtDateFull mocks base method.
func (m *MockTranslator) FmtDateFull(t time.Time) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FmtDateFull", t)
	ret0, _ := ret[0].(string)
	return ret0
}

// FmtDateFull indicates an expected call of FmtDateFull.
func (mr *MockTranslatorMockRecorder) FmtDateFull(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FmtDateFull", reflect.TypeOf((*MockTranslator)(nil).FmtDateFull), t)
}

// FmtDateLong mocks base method.
func (m *MockTranslator) FmtDateLong(t time.Time) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FmtDateLong", t)
	ret0, _ := ret[0].(string)
	return ret0
}

// FmtDateLong indicates an expected call of FmtDateLong.
func (mr *MockTranslatorMockRecorder) FmtDateLong(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FmtDateLong", reflect.TypeOf((*MockTranslator)(nil).FmtDateLong), t)
}

// FmtDateMedium mocks base method.
func (m *MockTranslator) FmtDateMedium(t time.Time) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FmtDateMedium", t)
	ret0, _ := ret[0].(string)
	return ret0
}

// FmtDateMedium indicates an expected call of FmtDateMedium.
func (mr *MockTranslatorMockRecorder) FmtDateMedium(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FmtDateMedium", reflect.TypeOf((*MockTranslator)(nil).FmtDateMedium), t)
}

// FmtDateShort mocks base method.
func (m *MockTranslator) FmtDateShort(t time.Time) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FmtDateShort", t)
	ret0, _ := ret[0].(string)
	return ret0
}

// FmtDateShort indicates an expected call of FmtDateShort.
func (mr *MockTranslatorMockRecorder) FmtDateShort(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FmtDateShort", reflect.TypeOf((*MockTranslator)(nil).FmtDateShort), t)
}

// FmtNumber mocks base method.
func (m *MockTranslator) FmtNumber(num float64, v uint64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FmtNumber", num, v)
	ret0, _ := ret[0].(string)
	return ret0
}

// FmtNumber indicates an expected call of FmtNumber.
func (mr *MockTranslatorMockRecorder) FmtNumber(num, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FmtNumber", reflect.TypeOf((*MockTranslator)(nil).FmtNumber), num, v)
}

// FmtPercent mocks base method.
func (m *MockTranslator) FmtPercent(num float64, v uint64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FmtPercent", num, v)
	ret0, _ := ret[0].(string)
	return ret0
}

// FmtPercent indicates an expected call of FmtPercent.
func (mr *MockTranslatorMockRecorder) FmtPercent(num, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FmtPercent", reflect.TypeOf((*MockTranslator)(nil).FmtPercent), num, v)
}

// FmtTimeFull mocks base method.
func (m *MockTranslator) FmtTimeFull(t time.Time) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FmtTimeFull", t)
	ret0, _ := ret[0].(string)
	return ret0
}

// FmtTimeFull indicates an expected call of FmtTimeFull.
func (mr *MockTranslatorMockRecorder) FmtTimeFull(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FmtTimeFull", reflect.TypeOf((*MockTranslator)(nil).FmtTimeFull), t)
}

// FmtTimeLong mocks base method.
func (m *MockTranslator) FmtTimeLong(t time.Time) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FmtTimeLong", t)
	ret0, _ := ret[0].(string)
	return ret0
}

// FmtTimeLong indicates an expected call of FmtTimeLong.
func (mr *MockTranslatorMockRecorder) FmtTimeLong(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FmtTimeLong", reflect.TypeOf((*MockTranslator)(nil).FmtTimeLong), t)
}

// FmtTimeMedium mocks base method.
func (m *MockTranslator) FmtTimeMedium(t time.Time) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FmtTimeMedium", t)
	ret0, _ := ret[0].(string)
	return ret0
}

// FmtTimeMedium indicates an expected call of FmtTimeMedium.
func (mr *MockTranslatorMockRecorder) FmtTimeMedium(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FmtTimeMedium", reflect.TypeOf((*MockTranslator)(nil).FmtTimeMedium), t)
}

// FmtTimeShort mocks base method.
func (m *MockTranslator) FmtTimeShort(t time.Time) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FmtTimeShort", t)
	ret0, _ := ret[0].(string)
	return ret0
}

// FmtTimeShort indicates an expected call of FmtTimeShort.
func (mr *MockTranslatorMockRecorder) FmtTimeShort(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FmtTimeShort", reflect.TypeOf((*MockTranslator)(nil).FmtTimeShort), t)
}

// Locale mocks base method.
func (m *MockTranslator) Locale() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Locale")
	ret0, _ := ret[0].(string)
	return ret0
}

// Locale indicates an expected call of Locale.
func (mr *MockTranslatorMockRecorder) Locale() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locale", reflect.TypeOf((*MockTranslator)(nil).Locale))
}

// MonthAbbreviated mocks base method.
func (m *MockTranslator) MonthAbbreviated(month time.Month) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonthAbbreviated", month)
	ret0, _ := ret[0].(string)
	return ret0
}

// MonthAbbreviated indicates an expected call of MonthAbbreviated.
func (mr *MockTranslatorMockRecorder) MonthAbbreviated(month any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonthAbbreviated", reflect.TypeOf((*MockTranslator)(nil).MonthAbbreviated), month)
}

// MonthNarrow mocks base method.
func (m *MockTranslator) MonthNarrow(month time.Month) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonthNarrow", month)
	ret0, _ := ret[0].(string)
	return ret0
}

// MonthNarrow indicates an expected call of MonthNarrow.
func (mr *MockTranslatorMockRecorder) MonthNarrow(month any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonthNarrow", reflect.TypeOf((*MockTranslator)(nil).MonthNarrow), month)
}

// MonthWide mocks base method.
func (m *MockTranslator) MonthWide(month time.Month) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonthWide", month)
	ret0, _ := ret[0].(string)
	return ret0
}

// MonthWide indicates an expected call of MonthWide.
func (mr *MockTranslatorMockRecorder) MonthWide(month any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonthWide", reflect.TypeOf((*MockTranslator)(nil).MonthWide), month)
}

// MonthsAbbreviated mocks base method.
func (m *MockTranslator) MonthsAbbreviated() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonthsAbbreviated")
	ret0, _ := ret[0].([]string)
	return ret0
}

// MonthsAbbreviated indicates an expected call of MonthsAbbreviated.
func (mr *MockTranslatorMockRecorder) MonthsAbbreviated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonthsAbbreviated", reflect.TypeOf((*MockTranslator)(nil).MonthsAbbreviated))
}

// MonthsNarrow mocks base method.
func (m *MockTranslator) MonthsNarrow() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonthsNarrow")
	ret0, _ := ret[0].([]string)
	return ret0
}

// MonthsNarrow indicates an expected call of MonthsNarrow.
func (mr *MockTranslatorMockRecorder) MonthsNarrow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonthsNarrow", reflect.TypeOf((*MockTranslator)(nil).MonthsNarrow))
}

// MonthsWide mocks base method.
func (m *MockTranslator) MonthsWide() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonthsWide")
	ret0, _ := ret[0].([]string)
	return ret0
}

// MonthsWide indicates an expected call of MonthsWide.
func (mr *MockTranslatorMockRecorder) MonthsWide() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonthsWide", reflect.TypeOf((*MockTranslator)(nil).MonthsWide))
}

// O mocks base method.
func (m *MockTranslator) O(key any, num float64, digits uint64, param string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "O", key, num, digits, param)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// O indicates an expected call of O.
func (mr *MockTranslatorMockRecorder) O(key, num, digits, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "O", reflect.TypeOf((*MockTranslator)(nil).O), key, num, digits, param)
}

// OrdinalPluralRule mocks base method.
func (m *MockTranslator) OrdinalPluralRule(num float64, v uint64) locales.PluralRule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrdinalPluralRule", num, v)
	ret0, _ := ret[0].(locales.PluralRule)
	return ret0
}

// OrdinalPluralRule indicates an expected call of OrdinalPluralRule.
func (mr *MockTranslatorMockRecorder) OrdinalPluralRule(num, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdinalPluralRule", reflect.TypeOf((*MockTranslator)(nil).OrdinalPluralRule), num, v)
}

// PluralsCardinal mocks base method.
func (m *MockTranslator) PluralsCardinal() []locales.PluralRule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluralsCardinal")
	ret0, _ := ret[0].([]locales.PluralRule)
	return ret0
}

// PluralsCardinal indicates an expected call of PluralsCardinal.
func (mr *MockTranslatorMockRecorder) PluralsCardinal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluralsCardinal", reflect.TypeOf((*MockTranslator)(nil).PluralsCardinal))
}

// PluralsOrdinal mocks base method.
func (m *MockTranslator) PluralsOrdinal() []locales.PluralRule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluralsOrdinal")
	ret0, _ := ret[0].([]locales.PluralRule)
	return ret0
}

// PluralsOrdinal indicates an expected call of PluralsOrdinal.
func (mr *MockTranslatorMockRecorder) PluralsOrdinal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluralsOrdinal", reflect.TypeOf((*MockTranslator)(nil).PluralsOrdinal))
}

// PluralsRange mocks base method.
func (m *MockTranslator) PluralsRange() []locales.PluralRule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluralsRange")
	ret0, _ := ret[0].([]locales.PluralRule)
	return ret0
}

// PluralsRange indicates an expected call of PluralsRange.
func (mr *MockTranslatorMockRecorder) PluralsRange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluralsRange", reflect.TypeOf((*MockTranslator)(nil).PluralsRange))
}

// R mocks base method.
func (m *MockTranslator) R(key any, num1 float64, digits1 uint64, num2 float64, digits2 uint64, param1, param2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R", key, num1, digits1, num2, digits2, param1, param2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// R indicates an expected call of R.
func (mr *MockTranslatorMockRecorder) R(key, num1, digits1, num2, digits2, param1, param2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R", reflect.TypeOf((*MockTranslator)(nil).R), key, num1, digits1, num2, digits2, param1, param2)
}

// RangePluralRule mocks base method.
func (m *MockTranslator) RangePluralRule(num1 float64, v1 uint64, num2 float64, v2 uint64) locales.PluralRule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangePluralRule", num1, v1, num2, v2)
	ret0, _ := ret[0].(locales.PluralRule)
	return ret0
}

// RangePluralRule indicates an expected call of RangePluralRule.
func (mr *MockTranslatorMockRecorder) RangePluralRule(num1, v1, num2, v2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangePluralRule", reflect.TypeOf((*MockTranslator)(nil).RangePluralRule), num1, v1, num2, v2)
}

// T mocks base method.
func (m *MockTranslator) T(key any, params ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "T", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// T indicates an expected call of T.
func (mr *MockTranslatorMockRecorder) T(key any, params ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "T", reflect.TypeOf((*MockTranslator)(nil).T), varargs...)
}

// VerifyTranslations mocks base method.
func (m *MockTranslator) VerifyTranslations() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyTranslations")
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyTranslations indicates an expected call of VerifyTranslations.
func (mr *MockTranslatorMockRecorder) VerifyTranslations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTranslations", reflect.TypeOf((*MockTranslator)(nil).VerifyTranslations))
}

// WeekdayAbbreviated mocks base method.
func (m *MockTranslator) WeekdayAbbreviated(weekday time.Weekday) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WeekdayAbbreviated", weekday)
	ret0, _ := ret[0].(string)
	return ret0
}

// WeekdayAbbreviated indicates an expected call of WeekdayAbbreviated.
func (mr *MockTranslatorMockRecorder) WeekdayAbbreviated(weekday any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WeekdayAbbreviated", reflect.TypeOf((*MockTranslator)(nil).WeekdayAbbreviated), weekday)
}

// WeekdayNarrow mocks base method.
func (m *MockTranslator) WeekdayNarrow(weekday time.Weekday) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WeekdayNarrow", weekday)
	ret0, _ := ret[0].(string)
	return ret0
}

// WeekdayNarrow indicates an expected call of WeekdayNarrow.
func (mr *MockTranslatorMockRecorder) WeekdayNarrow(weekday any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WeekdayNarrow", reflect.TypeOf((*MockTranslator)(nil).WeekdayNarrow), weekday)
}

// WeekdayShort mocks base method.
func (m *MockTranslator) WeekdayShort(weekday time.Weekday) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WeekdayShort", weekday)
	ret0, _ := ret[0].(string)
	return ret0
}

// WeekdayShort indicates an expected call of WeekdayShort.
func (mr *MockTranslatorMockRecorder) WeekdayShort(weekday any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WeekdayShort", reflect.TypeOf((*MockTranslator)(nil).WeekdayShort), weekday)
}

// WeekdayWide mocks base method.
func (m *MockTranslator) WeekdayWide(weekday time.Weekday) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WeekdayWide", weekday)
	ret0, _ := ret[0].(string)
	return ret0
}

// WeekdayWide indicates an expected call of WeekdayWide.
func (mr *MockTranslatorMockRecorder) WeekdayWide(weekday any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WeekdayWide", reflect.TypeOf((*MockTranslator)(nil).WeekdayWide), weekday)
}

// WeekdaysAbbreviated mocks base method.
func (m *MockTranslator) WeekdaysAbbreviated() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WeekdaysAbbreviated")
	ret0, _ := ret[0].([]string)
	return ret0
}

// WeekdaysAbbreviated indicates an expected call of WeekdaysAbbreviated.
func (mr *MockTranslatorMockRecorder) WeekdaysAbbreviated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WeekdaysAbbreviated", reflect.TypeOf((*MockTranslator)(nil).WeekdaysAbbreviated))
}

// WeekdaysNarrow mocks base method.
func (m *MockTranslator) WeekdaysNarrow() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WeekdaysNarrow")
	ret0, _ := ret[0].([]string)
	return ret0
}

// WeekdaysNarrow indicates an expected call of WeekdaysNarrow.
func (mr *MockTranslatorMockRecorder) WeekdaysNarrow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WeekdaysNarrow", reflect.TypeOf((*MockTranslator)(nil).WeekdaysNarrow))
}

// WeekdaysShort mocks base method.
func (m *MockTranslator) WeekdaysShort() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WeekdaysShort")
	ret0, _ := ret[0].([]string)
	return ret0
}

// WeekdaysShort indicates an expected call of WeekdaysShort.
func (mr *MockTranslatorMockRecorder) WeekdaysShort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WeekdaysShort", reflect.TypeOf((*MockTranslator)(nil).WeekdaysShort))
}

// WeekdaysWide mocks base method.
func (m *MockTranslator) WeekdaysWide() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WeekdaysWide")
	ret0, _ := ret[0].([]string)
	return ret0
}

// WeekdaysWide indicates an expected call of WeekdaysWide.
func (mr *MockTranslatorMockRecorder) WeekdaysWide() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WeekdaysWide", reflect.TypeOf((*MockTranslator)(nil).WeekdaysWide))
}
