// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/presentation/web/port/http/context.go
//
// Generated by this command:
//
//	mockgen -source=../internal/presentation/web/port/http/context.go -destination=presentation/web/port/http/mock_context.go -package=http
//

// Package http is a generated GoMock package.
package http

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
	isgomock struct{}
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// AbortWithStatusJSON mocks base method.
func (m *MockContext) AbortWithStatusJSON(code int, obj any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AbortWithStatusJSON", code, obj)
}

// AbortWithStatusJSON indicates an expected call of AbortWithStatusJSON.
func (mr *MockContextMockRecorder) AbortWithStatusJSON(code, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortWithStatusJSON", reflect.TypeOf((*MockContext)(nil).AbortWithStatusJSON), code, obj)
}

// Context mocks base method.
func (m *MockContext) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockContextMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockContext)(nil).Context))
}

// IsDelete mocks base method.
func (m *MockContext) IsDelete() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDelete")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDelete indicates an expected call of IsDelete.
func (mr *MockContextMockRecorder) IsDelete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDelete", reflect.TypeOf((*MockContext)(nil).IsDelete))
}

// IsGet mocks base method.
func (m *MockContext) IsGet() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsGet indicates an expected call of IsGet.
func (mr *MockContextMockRecorder) IsGet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGet", reflect.TypeOf((*MockContext)(nil).IsGet))
}

// IsJsonBodyValid mocks base method.
func (m *MockContext) IsJsonBodyValid() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsJsonBodyValid")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsJsonBodyValid indicates an expected call of IsJsonBodyValid.
func (mr *MockContextMockRecorder) IsJsonBodyValid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsJsonBodyValid", reflect.TypeOf((*MockContext)(nil).IsJsonBodyValid))
}

// IsJsonRequest mocks base method.
func (m *MockContext) IsJsonRequest() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsJsonRequest")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsJsonRequest indicates an expected call of IsJsonRequest.
func (mr *MockContextMockRecorder) IsJsonRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsJsonRequest", reflect.TypeOf((*MockContext)(nil).IsJsonRequest))
}

// IsPatch mocks base method.
func (m *MockContext) IsPatch() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPatch")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPatch indicates an expected call of IsPatch.
func (mr *MockContextMockRecorder) IsPatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPatch", reflect.TypeOf((*MockContext)(nil).IsPatch))
}

// IsPost mocks base method.
func (m *MockContext) IsPost() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPost")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPost indicates an expected call of IsPost.
func (mr *MockContextMockRecorder) IsPost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPost", reflect.TypeOf((*MockContext)(nil).IsPost))
}

// IsPut mocks base method.
func (m *MockContext) IsPut() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPut")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPut indicates an expected call of IsPut.
func (mr *MockContextMockRecorder) IsPut() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPut", reflect.TypeOf((*MockContext)(nil).IsPut))
}

// JSON mocks base method.
func (m *MockContext) JSON(code int, obj any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JSON", code, obj)
}

// JSON indicates an expected call of JSON.
func (mr *MockContextMockRecorder) JSON(code, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockContext)(nil).JSON), code, obj)
}

// Next mocks base method.
func (m *MockContext) Next() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Next")
}

// Next indicates an expected call of Next.
func (mr *MockContextMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockContext)(nil).Next))
}

// NoContent mocks base method.
func (m *MockContext) NoContent() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NoContent")
}

// NoContent indicates an expected call of NoContent.
func (mr *MockContextMockRecorder) NoContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoContent", reflect.TypeOf((*MockContext)(nil).NoContent))
}

// ParamInt mocks base method.
func (m *MockContext) ParamInt(key string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParamInt", key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParamInt indicates an expected call of ParamInt.
func (mr *MockContextMockRecorder) ParamInt(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParamInt", reflect.TypeOf((*MockContext)(nil).ParamInt), key)
}

// ParamString mocks base method.
func (m *MockContext) ParamString(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParamString", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// ParamString indicates an expected call of ParamString.
func (mr *MockContextMockRecorder) ParamString(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParamString", reflect.TypeOf((*MockContext)(nil).ParamString), key)
}

// ShouldBindJSON mocks base method.
func (m *MockContext) ShouldBindJSON(obj any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindJSON", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindJSON indicates an expected call of ShouldBindJSON.
func (mr *MockContextMockRecorder) ShouldBindJSON(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindJSON", reflect.TypeOf((*MockContext)(nil).ShouldBindJSON), obj)
}
