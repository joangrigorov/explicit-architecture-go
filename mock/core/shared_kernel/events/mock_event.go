// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/core/shared_kernel/events/event.go
//
// Generated by this command:
//
//	mockgen -source=../internal/core/shared_kernel/events/event.go -destination=core/shared_kernel/events/mock_event.go -package=events
//

// Package events is a generated GoMock package.
package events

import (
	events "app/internal/core/shared_kernel/events"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
	isgomock struct{}
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockEvent) ID() events.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(events.EventID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockEventMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockEvent)(nil).ID))
}
