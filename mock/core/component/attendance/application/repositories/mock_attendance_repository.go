// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/core/component/attendance/application/repositories/attendance_repository.go
//
// Generated by this command:
//
//	mockgen -source=../internal/core/component/attendance/application/repositories/attendance_repository.go -destination=core/component/attendance/application/repositories/mock_attendance_repository.go -package=repositories
//

// Package repositories is a generated GoMock package.
package repositories

import (
	domain "app/internal/core/component/attendance/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAttendanceRepository is a mock of AttendanceRepository interface.
type MockAttendanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAttendanceRepositoryMockRecorder
	isgomock struct{}
}

// MockAttendanceRepositoryMockRecorder is the mock recorder for MockAttendanceRepository.
type MockAttendanceRepositoryMockRecorder struct {
	mock *MockAttendanceRepository
}

// NewMockAttendanceRepository creates a new mock instance.
func NewMockAttendanceRepository(ctrl *gomock.Controller) *MockAttendanceRepository {
	mock := &MockAttendanceRepository{ctrl: ctrl}
	mock.recorder = &MockAttendanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttendanceRepository) EXPECT() *MockAttendanceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAttendanceRepository) Create(arg0 context.Context, arg1 *domain.Attendance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAttendanceRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAttendanceRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockAttendanceRepository) Delete(arg0 context.Context, arg1 *domain.Attendance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAttendanceRepositoryMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAttendanceRepository)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockAttendanceRepository) GetAll(arg0 context.Context) ([]*domain.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*domain.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAttendanceRepositoryMockRecorder) GetAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAttendanceRepository)(nil).GetAll), arg0)
}

// GetById mocks base method.
func (m *MockAttendanceRepository) GetById(arg0 context.Context, arg1 domain.AttendanceId) (*domain.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*domain.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockAttendanceRepositoryMockRecorder) GetById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockAttendanceRepository)(nil).GetById), arg0, arg1)
}

// Update mocks base method.
func (m *MockAttendanceRepository) Update(arg0 context.Context, arg1 *domain.Attendance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAttendanceRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAttendanceRepository)(nil).Update), arg0, arg1)
}
