// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/core/port/events/subscriber.go
//
// Generated by this command:
//
//	mockgen -source=../internal/core/port/events/subscriber.go -destination=core/port/events/mock_subscriber.go -package=events
//

// Package events is a generated GoMock package.
package events

import (
	events "app/internal/core/port/events"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSubscriber is a mock of Subscriber interface.
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
	isgomock struct{}
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber.
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance.
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// Dispatch mocks base method.
func (m *MockSubscriber) Dispatch(arg0 context.Context, arg1 events.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockSubscriberMockRecorder) Dispatch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockSubscriber)(nil).Dispatch), arg0, arg1)
}
